// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
//  previewFeatures = ["referentialActions"]
}

model User {
    id          String  @id
    nickname    String  @unique
    email       String  @unique
    point       Int     @default(0)
    box         Box[]
    cart        Cart[]
    boxStorage  BoxStorage[]
    coupon      Coupon[]
    Purchase    Purchase[]
    openResult  OpenResult[]
    isManager   Boolean @default(false)
    event       Event[]
}

model Point {
    id      Int     @default(autoincrement())   @id
    userId  String
    title   String
    point   Int
    total   Int
    isAdd   Boolean
    time    String
}

model Box {
    id          Int             @default(autoincrement()) @id
    title       String
    price       Int
    image       String
    isLocal     Boolean
    detail      String          @db.VarChar(3000)
    owner       User            @relation(fields: [ownerId], references: [id])
    ownerId     String
    items       BoxItem[]
    purchase    BoxPurchase[]
    boxStorage  BoxStorage[]
    sales       Int             @default(0)
    isManager   Boolean         @default(false)
    isDelete    Boolean         @default(false)
}

model Item {
    id          Int     @default(autoincrement()) @id
    productId   String
    seller      Int
    title       String
    price       Int
    image       String
    detail      String  @db.VarChar(3000)
    boxes       BoxItem[]
    coupon      Coupon[]
    openResult  OpenResult[]
}

model Cart {
    id      Int     @default(autoincrement()) @id
    box_id  Int
    user    User    @relation(fields: [userId], references: [id])
    userId  String
}

model BoxItem {
    id      Int     @default(autoincrement()) @id
    box     Box     @relation(fields: [boxId], references: [id])
    boxId   Int
    item    Item    @relation(fields: [itemId], references: [id])
    itemId  Int
}

model BoxPurchase{
    id          Int         @default(autoincrement())   @id
    box         Box         @relation(fields: [boxId], references: [id])
    boxId       Int
    purchase    Purchase    @relation(fields: [purchaseId], references: [id])
    purchaseId  String
    count       Int?
}

model Purchase {
    id              String      @id @unique
    imp_uid         String
    owner           User        @relation(fields: [ownerId], references: [id])
    ownerId         String
    boxes           BoxPurchase[]
    purchaseAt      String
    price           Int
    refund          Boolean     @default(false)
    refundAt        String?
    usedPoint       Int         @default(0)
}

model Notice {
    id      Int     @default(autoincrement())   @id
    imgUrl  String
    srcUrl  String
}

model Coupon {
    id          Int         @default(autoincrement())   @id
    owner       User        @relation(fields: [ownerId], references: [id])
    ownerId     String
    item        Item        @relation(fields: [itemId], references: [id])
    itemId      Int
    isUsed      Boolean     @default(false)
    createAt    String
    refund      Boolean     @default(false)
    refundAt    String?
    Expiration  String
    isShow      Boolean     @default(true)
}

model CouponUsedRecord {
    id          Int         @default(autoincrement())   @id
    status      Boolean     @default(false)
    productId   String
    owner       String
    usedAt      String
    phone       String
}

model BoxStorage {
    id      Int     @default(autoincrement())   @id
    owner   User    @relation(fields: [ownerId], references: [id])
    ownerId String
    box     Box     @relation(fields: [boxId], references: [id])
    boxId   Int
    count   Int?    @default(1)
}

model OpenResult {
    id      Int     @default(autoincrement()) @id
    boxId   Int
    user    User    @relation(fields: [userId], references: [id])
    item    Item    @relation(fields: [itemId], references: [id])
    userId  String
    itemId  Int
    openAt  String
}

model Event {
    id          Int     @default(autoincrement())   @id
    eventId     Int
    owner       User    @relation(fields: [userId], references: [id])
    userId      String
}

model Survey {
    id          Int         @default(autoincrement())   @id
    userId      String
    survey      String      @db.VarChar(5000)
    writeAt     String
}
